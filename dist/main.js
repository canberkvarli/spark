/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/audiomotion-analyzer/src/audioMotion-analyzer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/audiomotion-analyzer/src/audioMotion-analyzer.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ AudioMotionAnalyzer; }\n/* harmony export */ });\n/**!\n * audioMotion-analyzer\n * High-resolution real-time graphic audio spectrum analyzer JS module\n *\n * @version 3.6.1\n * @author  Henrique Avila Vianna <hvianna@gmail.com> <https://henriquevianna.com>\n * @license AGPL-3.0-or-later\n */\n\nconst VERSION = '3.6.1';\n\n// internal constants\nconst TAU     = 2 * Math.PI,\n\t  HALF_PI = Math.PI / 2,\n\t  RPM     = TAU / 3600,           // angle increment per frame for one revolution per minute @60fps\n\t  ROOT24  = 2 ** ( 1 / 24 ),      // 24th root of 2\n\t  C0      = 440 * ROOT24 ** -114; // ~16.35 Hz\n\nclass AudioMotionAnalyzer {\n\n/**\n * CONSTRUCTOR\n *\n * @param {object} [container] DOM element where to insert the analyzer; if undefined, uses the document body\n * @param {object} [options]\n * @returns {object} AudioMotionAnalyzer object\n */\n\tconstructor( container, options = {} ) {\n\n\t\tthis._ready = false;\n\n\t\t// Gradient definitions\n\n\t\tthis._gradients = {\n\t\t\tclassic: {\n\t\t\t\tbgColor: '#111',\n\t\t\t\tcolorStops: [\n\t\t\t\t\t'hsl( 0, 100%, 50% )',\n\t\t\t\t\t{ pos: .6, color: 'hsl( 60, 100%, 50% )' },\n\t\t\t\t\t'hsl( 120, 100%, 50% )'\n\t\t\t\t]\n\t\t\t},\n\t\t\tprism:   {\n\t\t\t\tbgColor: '#111',\n\t\t\t\tcolorStops: [\n\t\t\t\t\t'hsl( 0, 100%, 50% )',\n\t\t\t\t\t'hsl( 60, 100%, 50% )',\n\t\t\t\t\t'hsl( 120, 100%, 50% )',\n\t\t\t\t\t'hsl( 180, 100%, 50% )',\n\t\t\t\t\t'hsl( 240, 100%, 50% )'\n\t\t\t\t]\n\t\t\t},\n\t\t\trainbow: {\n\t\t\t\tbgColor: '#111',\n\t\t\t\tdir: 'h',\n\t\t\t\tcolorStops: [\n\t\t\t\t\t'hsl( 0, 100%, 50% )',\n\t\t\t\t\t'hsl( 60, 100%, 50% )',\n\t\t\t\t\t'hsl( 120, 100%, 50% )',\n\t\t\t\t\t'hsl( 180, 100%, 47% )',\n\t\t\t\t\t'hsl( 240, 100%, 58% )',\n\t\t\t\t\t'hsl( 300, 100%, 50% )',\n\t\t\t\t\t'hsl( 360, 100%, 50% )'\n\t\t\t\t]\n\t\t\t},\n\t\t};\n\n\t\t// Set container\n\t\tthis._container = container || document.body;\n\n\t\t// Make sure we have minimal width and height dimensions in case of an inline container\n\t\tthis._defaultWidth  = this._container.clientWidth  || 640;\n\t\tthis._defaultHeight = this._container.clientHeight || 270;\n\n\t\t// Use audio context provided by user, or create a new one\n\n\t\tlet audioCtx;\n\n\t\tif ( options.source && ( audioCtx = options.source.context ) ) {\n\t\t\t// get audioContext from provided source audioNode\n\t\t}\n\t\telse if ( audioCtx = options.audioCtx ) {\n\t\t\t// use audioContext provided by user\n\t\t}\n\t\telse {\n\t\t\ttry {\n\t\t\t\taudioCtx = new ( window.AudioContext || window.webkitAudioContext )();\n\t\t\t}\n\t\t\tcatch( err ) {\n\t\t\t\tthrow new AudioMotionError( 'ERR_AUDIO_CONTEXT_FAIL', 'Could not create audio context. Web Audio API not supported?' );\n\t\t\t}\n\t\t}\n\n\t\t// make sure audioContext is valid\n\t\tif ( ! audioCtx.createGain )\n\t\t\tthrow new AudioMotionError( 'ERR_INVALID_AUDIO_CONTEXT', 'Provided audio context is not valid' );\n\n\t\t/*\n\t\t\tConnection routing:\n\t\t\t===================\n\n\t\t\tfor STEREO:                              +--->  analyzer[0]  ---+\n\t\t    \t                                     |                      |\n\t\t\t(source) --->  input  --->  splitter  ---+                      +--->  merger  --->  output  ---> (destination)\n\t\t    \t                                     |                      |\n\t\t        \t                                 +--->  analyzer[1]  ---+\n\n\t\t\tfor MONO:\n\n\t\t\t(source) --->  input  ----------------------->  analyzer[0]  --------------------->  output  ---> (destination)\n\n\t\t*/\n\n\t\t// create the analyzer nodes, channel splitter and merger, and gain nodes for input/output connections\n\t\tconst analyzer = this._analyzer = [ audioCtx.createAnalyser(), audioCtx.createAnalyser() ];\n\t\tconst splitter = this._splitter = audioCtx.createChannelSplitter(2);\n \t\tconst merger   = this._merger   = audioCtx.createChannelMerger(2);\n \t\tthis._input    = audioCtx.createGain();\n \t\tthis._output   = audioCtx.createGain();\n\n \t\t// initialize sources array and connect audio source if provided in the options\n\t\tthis._sources = [];\n\t\tif ( options.source )\n\t\t\tthis.connectInput( options.source );\n\n \t\t// connect splitter -> analyzers\n \t\tfor ( const i of [0,1] )\n\t\t\tsplitter.connect( analyzer[ i ], i );\n\n\t\t// connect merger -> output\n\t\tmerger.connect( this._output );\n\n\t\t// connect output -> destination (speakers)\n\t\tthis._outNodes = [];\n\t\tif ( options.connectSpeakers !== false )\n\t\t\tthis.connectOutput();\n\n\t\t// initialize object to save energy\n\t\tthis._energy = { val: 0, peak: 0, hold: 0 };\n\n\t\t// create analyzer canvas\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.style = 'max-width: 100%;';\n\t\tthis._canvasCtx = canvas.getContext('2d');\n\n\t\t// create auxiliary canvases for the X-axis and radial scale labels\n\t\tfor ( const ctx of [ '_scaleX', '_scaleR' ] )\n\t\t\tthis[ ctx ] = document.createElement('canvas').getContext('2d');\n\n\t\t// set fullscreen element (defaults to canvas)\n\t\tthis._fsEl = options.fsElement || canvas;\n\n\t\t// Update canvas size on container / window resize and fullscreen events\n\n\t\t// Fullscreen changes are handled quite differently across browsers:\n\t\t// 1. Chromium browsers will trigger a `resize` event followed by a `fullscreenchange`\n\t\t// 2. Firefox triggers the `fullscreenchange` first and then the `resize`\n\t\t// 3. Chrome on Android (TV) won't trigger a `resize` event, only `fullscreenchange`\n\t\t// 4. Safari won't trigger `fullscreenchange` events at all, and on iPadOS the `resize`\n\t\t//    event is triggered **on the window** only (last tested on iPadOS 14)\n\n\t\t// helper function for resize events\n\t\tconst onResize = () => {\n\t\t\tif ( ! this._fsTimeout ) {\n\t\t\t\t// delay the resize to prioritize a possible following `fullscreenchange` event\n\t\t\t\tthis._fsTimeout = window.setTimeout( () => {\n\t\t\t\t\tif ( ! this._fsChanging ) {\n\t\t\t\t\t\tthis._setCanvas('resize');\n\t\t\t\t\t\tthis._fsTimeout = 0;\n\t\t\t\t\t}\n\t\t\t\t}, 60 );\n\t\t\t}\n\t\t}\n\n\t\t// if browser supports ResizeObserver, listen for resize on the container\n\t\tif ( window.ResizeObserver ) {\n\t\t\tconst resizeObserver = new ResizeObserver( onResize );\n\t\t\tresizeObserver.observe( this._container );\n\t\t}\n\n\t\t// listen for resize events on the window - required for fullscreen on iPadOS\n\t\twindow.addEventListener( 'resize', onResize );\n\n\t\t// listen for fullscreenchange events on the canvas - not available on Safari\n\t\tcanvas.addEventListener( 'fullscreenchange', () => {\n\t\t\t// set flag to indicate a fullscreen change in progress\n\t\t\tthis._fsChanging = true;\n\n\t\t\t// if there is a scheduled resize event, clear it\n\t\t\tif ( this._fsTimeout )\n\t\t\t\twindow.clearTimeout( this._fsTimeout );\n\n\t\t\t// update the canvas\n\t\t\tthis._setCanvas('fschange');\n\n\t\t\t// delay clearing the flag to prevent any shortly following resize event\n\t\t\tthis._fsTimeout = window.setTimeout( () => {\n\t\t\t\tthis._fsChanging = false;\n\t\t\t\tthis._fsTimeout = 0;\n\t\t\t}, 60 );\n\t\t});\n\n\t\t// Resume audio context if in suspended state (browsers' autoplay policy)\n\t\tconst unlockContext = () => {\n\t\t\tif ( audioCtx.state == 'suspended' )\n\t\t\t\taudioCtx.resume();\n\t\t\twindow.removeEventListener( 'click', unlockContext );\n\t\t}\n\t\twindow.addEventListener( 'click', unlockContext );\n\n\t\t// initialize internal variables\n\t\tthis._calcAux();\n\n\t\t// Set configuration options and use defaults for any missing properties\n\t\tthis._setProps( options, true );\n\n\t\t// add canvas to the container\n\t\tif ( this.useCanvas )\n\t\t\tthis._container.appendChild( canvas );\n\n\t\t// Finish canvas setup\n\t\tthis._ready = true;\n\t\tthis._setCanvas('create');\n\t}\n\n\t/**\n\t * ==========================================================================\n\t *\n\t * PUBLIC PROPERTIES GETTERS AND SETTERS\n\t *\n\t * ==========================================================================\n\t */\n\n\n\tget alphaBars() {\n\t\treturn this._alphaBars;\n\t}\n\tset alphaBars( value ) {\n\t\tthis._alphaBars = !! value;\n\t\tthis._calcAux();\n\t}\n\n\tget barSpace() {\n\t\treturn this._barSpace;\n\t}\n\tset barSpace( value ) {\n\t\tthis._barSpace = +value || 0;\n\t\tthis._calcAux();\n\t}\n\n\tget fftSize() {\n\t\treturn this._analyzer[0].fftSize;\n\t}\n\tset fftSize( value ) {\n\t\tfor ( const i of [0,1] )\n\t\t\tthis._analyzer[ i ].fftSize = value;\n\t\tconst binCount = this._analyzer[0].frequencyBinCount;\n\t\tthis._fftData = [ new Uint8Array( binCount ), new Uint8Array( binCount ) ];\n\t\tthis._calcBars();\n\t}\n\n\tget gradient() {\n\t\treturn this._gradient;\n\t}\n\tset gradient( value ) {\n\t\tif ( ! this._gradients.hasOwnProperty( value ) )\n\t\t\tthrow new AudioMotionError( 'ERR_UNKNOWN_GRADIENT', `Unknown gradient: '${value}'` );\n\n\t\tthis._gradient = value;\n\t\tthis._makeGrad();\n\t}\n\n\tget height() {\n\t\treturn this._height;\n\t}\n\tset height( h ) {\n\t\tthis._height = h;\n\t\tthis._setCanvas('user');\n\t}\n\n\tget ledBars() {\n\t\treturn this._showLeds;\n\t}\n\tset ledBars( value ) {\n\t\tthis._showLeds = !! value;\n\t\tthis._calcAux();\n\t}\n\n\tget loRes() {\n\t\treturn this._loRes;\n\t}\n\tset loRes( value ) {\n\t\tthis._loRes = !! value;\n\t\tthis._setCanvas('lores');\n\t}\n\n\tget lumiBars() {\n\t\treturn this._lumiBars;\n\t}\n\tset lumiBars( value ) {\n\t\tthis._lumiBars = !! value;\n\t\tthis._calcAux();\n\t\tthis._calcLeds();\n\t\tthis._makeGrad();\n\t}\n\n\tget maxDecibels() {\n\t\treturn this._analyzer[0].maxDecibels;\n\t}\n\tset maxDecibels( value ) {\n\t\tfor ( const i of [0,1] )\n\t\t\tthis._analyzer[ i ].maxDecibels = value;\n\t}\n\n\tget maxFreq() {\n\t\treturn this._maxFreq;\n\t}\n\tset maxFreq( value ) {\n\t\tif ( value < 1 )\n\t\t\tthrow new AudioMotionError( 'ERR_FREQUENCY_TOO_LOW', `Frequency values must be >= 1` );\n\t\telse {\n\t\t\tthis._maxFreq = value;\n\t\t\tthis._calcBars();\n\t\t}\n\t}\n\n\tget minDecibels() {\n\t\treturn this._analyzer[0].minDecibels;\n\t}\n\tset minDecibels( value ) {\n\t\tfor ( const i of [0,1] )\n\t\t\tthis._analyzer[ i ].minDecibels = value;\n\t}\n\n\tget minFreq() {\n\t\treturn this._minFreq;\n\t}\n\tset minFreq( value ) {\n\t\tif ( value < 1 )\n\t\t\tthrow new AudioMotionError( 'ERR_FREQUENCY_TOO_LOW', `Frequency values must be >= 1` );\n\t\telse {\n\t\t\tthis._minFreq = value;\n\t\t\tthis._calcBars();\n\t\t}\n\t}\n\n\tget mirror() {\n\t\treturn this._mirror;\n\t}\n\tset mirror( value ) {\n\t\tthis._mirror = Math.sign( value ) | 0; // ensure only -1, 0 or 1\n\t\tthis._calcAux();\n\t\tthis._calcBars();\n\t\tthis._makeGrad();\n\t}\n\n\tget mode() {\n\t\treturn this._mode;\n\t}\n\tset mode( value ) {\n\t\tconst mode = value | 0;\n\t\tif ( mode >= 0 && mode <= 10 && mode != 9 ) {\n\t\t\tthis._mode = mode;\n\t\t\tthis._calcAux();\n\t\t\tthis._calcBars();\n\t\t\tthis._makeGrad();\n\t\t}\n\t\telse\n\t\t\tthrow new AudioMotionError( 'ERR_INVALID_MODE', `Invalid mode: ${value}` );\n\t}\n\n\tget outlineBars() {\n\t\treturn this._outlineBars;\n\t}\n\tset outlineBars( value ) {\n\t\tthis._outlineBars = !! value;\n\t\tthis._calcAux();\n\t}\n\n\tget radial() {\n\t\treturn this._radial;\n\t}\n\tset radial( value ) {\n\t\tthis._radial = !! value;\n\t\tthis._calcAux();\n\t\tthis._calcBars();\n\t\tthis._makeGrad();\n\t}\n\n\tget reflexRatio() {\n\t\treturn this._reflexRatio;\n\t}\n\tset reflexRatio( value ) {\n\t\tvalue = +value || 0;\n\t\tif ( value < 0 || value >= 1 )\n\t\t\tthrow new AudioMotionError( 'ERR_REFLEX_OUT_OF_RANGE', `Reflex ratio must be >= 0 and < 1` );\n\t\telse {\n\t\t\tthis._reflexRatio = value;\n\t\t\tthis._calcAux();\n\t\t\tthis._makeGrad();\n\t\t\tthis._calcLeds();\n\t\t}\n\t}\n\n\t// DEPRECATED - use ledBars instead\n\tget showLeds() {\n\t\treturn this.ledBars;\n\t}\n\tset showLeds( value ) {\n\t\tthis.ledBars = value;\n\t}\n\n\tget smoothing() {\n\t\treturn this._analyzer[0].smoothingTimeConstant;\n\t}\n\tset smoothing( value ) {\n\t\tfor ( const i of [0,1] )\n\t\t\tthis._analyzer[ i ].smoothingTimeConstant = value;\n\t}\n\n\tget spinSpeed() {\n\t\treturn this._spinSpeed;\n\t}\n\tset spinSpeed( value ) {\n\t\tvalue = +value || 0;\n\t\tif ( this._spinSpeed === undefined || value == 0 )\n\t\t\tthis._spinAngle = -HALF_PI; // initialize or reset the rotation angle\n\t\tthis._spinSpeed = value;\n\t}\n\n\tget splitGradient() {\n\t\treturn this._splitGradient;\n\t}\n\tset splitGradient( value ) {\n\t\tthis._splitGradient = !! value;\n\t\tthis._makeGrad();\n\t}\n\n\tget stereo() {\n\t\treturn this._stereo;\n\t}\n\tset stereo( value ) {\n\t\tthis._stereo = !! value;\n\n\t\t// update node connections\n\t\tthis._input.disconnect();\n\t\tthis._input.connect( this._stereo ? this._splitter : this._analyzer[0] );\n\t\tthis._analyzer[0].disconnect();\n\t\tif ( this._outNodes.length ) // connect analyzer only if the output is connected to other nodes\n\t\t\tthis._analyzer[0].connect( this._stereo ? this._merger : this._output );\n\n\t\t// update properties affected by stereo\n\t\tthis._calcAux();\n\t\tthis._createScales();\n\t\tthis._calcLeds();\n\t\tthis._makeGrad();\n\t}\n\n\tget volume() {\n\t\treturn this._output.gain.value;\n\t}\n\tset volume( value ) {\n\t\tthis._output.gain.value = value;\n\t}\n\n\tget width() {\n\t\treturn this._width;\n\t}\n\tset width( w ) {\n\t\tthis._width = w;\n\t\tthis._setCanvas('user');\n\t}\n\n\t// Read only properties\n\n\tget audioCtx() {\n\t\treturn this._input.context;\n\t}\n\tget canvas() {\n\t\treturn this._canvasCtx.canvas;\n\t}\n\tget canvasCtx() {\n\t\treturn this._canvasCtx;\n\t}\n\tget connectedSources() {\n\t\treturn this._sources;\n\t}\n\tget connectedTo() {\n\t\treturn this._outNodes;\n\t}\n\tget energy() { // DEPRECATED - use getEnergy() instead\n\t\treturn this.getEnergy();\n\t}\n\tget fps() {\n\t\treturn this._fps;\n\t}\n\tget fsHeight() {\n\t\treturn this._fsHeight;\n\t}\n\tget fsWidth() {\n\t\treturn this._fsWidth;\n\t}\n\tget isAlphaBars() {\n\t\treturn this._isAlphaBars;\n\t}\n\tget isFullscreen() {\n\t\treturn ( document.fullscreenElement || document.webkitFullscreenElement ) === this._fsEl;\n\t}\n\tget isLedBars() {\n\t\treturn this._isLedDisplay;\n\t}\n\tget isLedDisplay() { // DEPRECATED - use isLedBars instead\n\t\treturn this.isLedBars;\n\t}\n\tget isLumiBars() {\n\t\treturn this._isLumiBars;\n\t}\n\tget isOctaveBands() {\n\t\treturn this._isOctaveBands;\n\t}\n\tget isOn() {\n\t\treturn this._runId !== undefined;\n\t}\n\tget isOutlineBars() {\n\t\treturn this._isOutline;\n\t}\n\tget peakEnergy() { // DEPRECATED - use getEnergy('peak') instead\n\t\treturn this.getEnergy('peak');\n\t}\n\tget pixelRatio() {\n\t\treturn this._pixelRatio;\n\t}\n\tstatic get version() {\n\t\treturn VERSION;\n\t}\n\n\t/**\n\t * ==========================================================================\n     *\n\t * PUBLIC METHODS\n\t *\n\t * ==========================================================================\n\t */\n\n\t/**\n\t * Connects an HTML media element or audio node to the analyzer\n\t *\n\t * @param {object} an instance of HTMLMediaElement or AudioNode\n\t * @returns {object} a MediaElementAudioSourceNode object if created from HTML element, or the same input object otherwise\n\t */\n\tconnectInput( source ) {\n\t\tconst isHTML = source instanceof HTMLMediaElement;\n\n\t\tif ( ! ( isHTML || source.connect ) )\n\t\t\tthrow new AudioMotionError( 'ERR_INVALID_AUDIO_SOURCE', 'Audio source must be an instance of HTMLMediaElement or AudioNode' );\n\n\t\t// if source is an HTML element, create an audio node for it; otherwise, use the provided audio node\n\t\tconst node = isHTML ? this.audioCtx.createMediaElementSource( source ) : source;\n\n\t\tif ( ! this._sources.includes( node ) ) {\n\t\t\tnode.connect( this._input );\n\t\t\tthis._sources.push( node );\n\t\t}\n\n\t\treturn node;\n\t}\n\n\t/**\n\t * Connects the analyzer output to another audio node\n\t *\n\t * @param [{object}] an AudioNode; if undefined, the output is connected to the audio context destination (speakers)\n\t */\n\tconnectOutput( node = this.audioCtx.destination ) {\n\t\tif ( this._outNodes.includes( node ) )\n\t\t\treturn;\n\n\t\tthis._output.connect( node );\n\t\tthis._outNodes.push( node );\n\n\t\t// when connecting the first node, also connect the analyzer nodes to the merger / output nodes\n\t\tif ( this._outNodes.length == 1 ) {\n\t\t\tfor ( const i of [0,1] )\n\t\t\t\tthis._analyzer[ i ].connect( ( ! this._stereo && ! i ? this._output : this._merger ), 0, i );\n\t\t}\n\t}\n\n\t/**\n\t * Disconnects audio sources from the analyzer\n\t *\n\t * @param [{object|array}] a connected AudioNode object or an array of such objects; if undefined, all connected nodes are disconnected\n\t */\n\tdisconnectInput( sources ) {\n\t\tif ( ! sources )\n\t\t\tsources = Array.from( this._sources );\n\t\telse if ( ! Array.isArray( sources ) )\n\t\t\tsources = [ sources ];\n\n\t\tfor ( const node of sources ) {\n\t\t\tconst idx = this._sources.indexOf( node );\n\t\t\tif ( idx >= 0 ) {\n\t\t\t\tnode.disconnect( this._input );\n\t\t\t\tthis._sources.splice( idx, 1 );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Disconnects the analyzer output from other audio nodes\n\t *\n\t * @param [{object}] a connected AudioNode object; if undefined, all connected nodes are disconnected\n\t */\n\tdisconnectOutput( node ) {\n\t\tif ( node && ! this._outNodes.includes( node ) )\n\t\t\treturn;\n\n\t\tthis._output.disconnect( node );\n\t\tthis._outNodes = node ? this._outNodes.filter( e => e !== node ) : [];\n\n\t\t// if disconnected from all nodes, also disconnect the analyzer nodes so they keep working on Chromium\n\t\t// see https://github.com/hvianna/audioMotion-analyzer/issues/13#issuecomment-808764848\n\t\tif ( this._outNodes.length == 0 ) {\n\t\t\tfor ( const i of [0,1] )\n\t\t\t\tthis._analyzer[ i ].disconnect();\n\t\t}\n\t}\n\n\t/**\n\t * Returns analyzer bars data\n     *\n\t * @returns {array}\n\t */\n\tgetBars() {\n\t\treturn Array.from( this._bars, ( { posX, freqLo, freqHi, hold, peak, value } ) => ( { posX, freqLo, freqHi, hold, peak, value } ) );\n\t}\n\n\t/**\n\t * Returns the energy of a frequency, or average energy of a range of frequencies\n\t *\n\t * @param [{number|string}] single or initial frequency (Hz), or preset name; if undefined, returns the overall energy\n\t * @param [{number}] ending frequency (Hz)\n\t * @returns {number|null} energy value (0 to 1) or null, if the specified preset is unknown\n\t */\n\tgetEnergy( startFreq, endFreq ) {\n\t\tif ( startFreq === undefined )\n\t\t\treturn this._energy.val;\n\n\t\t// if startFreq is a string, check for presets\n\t\tif ( startFreq != +startFreq ) {\n\t\t\tif ( startFreq == 'peak' )\n\t\t\t\treturn this._energy.peak;\n\n\t\t\tconst presets = {\n\t\t\t\tbass:    [ 20, 250 ],\n\t\t\t\tlowMid:  [ 250, 500 ],\n\t\t\t\tmid:     [ 500, 2e3 ],\n\t\t\t\thighMid: [ 2e3, 4e3 ],\n\t\t\t\ttreble:  [ 4e3, 16e3 ]\n\t\t\t}\n\n\t\t\tif ( ! presets[ startFreq ] )\n\t\t\t\treturn null;\n\n\t\t\t[ startFreq, endFreq ] = presets[ startFreq ];\n\t\t}\n\n\t\tconst startBin = this._freqToBin( startFreq ),\n\t\t      endBin   = endFreq ? this._freqToBin( endFreq ) : startBin,\n\t\t      chnCount = this._stereo + 1;\n\n\t\tlet energy = 0;\n\t\tfor ( let channel = 0; channel < chnCount; channel++ ) {\n\t\t\tfor ( let i = startBin; i <= endBin; i++ )\n\t\t\t\tenergy += this._fftData[ channel ][ i ];\n\t\t}\n\n\t\treturn energy / ( endBin - startBin + 1 ) / chnCount / 255;\n\t}\n\n\t/**\n\t * Registers a custom gradient\n\t *\n\t * @param {string} name\n\t * @param {object} options\n\t */\n\tregisterGradient( name, options ) {\n\t\tif ( typeof name !== 'string' || name.trim().length == 0 )\n\t\t\tthrow new AudioMotionError( 'ERR_GRADIENT_INVALID_NAME', 'Gradient name must be a non-empty string' );\n\n\t\tif ( typeof options !== 'object' )\n\t\t\tthrow new AudioMotionError( 'ERR_GRADIENT_NOT_AN_OBJECT', 'Gradient options must be an object' );\n\n\t\tif ( options.colorStops === undefined || options.colorStops.length < 2 )\n\t\t\tthrow new AudioMotionError( 'ERR_GRADIENT_MISSING_COLOR', 'Gradient must define at least two colors' );\n\n\t\tthis._gradients[ name ] = {\n\t\t\tbgColor:    options.bgColor || '#111',\n\t\t\tdir:        options.dir,\n\t\t\tcolorStops: options.colorStops\n\t\t};\n\n\t\t// if the registered gradient is the current one, regenerate it\n\t\tif ( name == this._gradient )\n\t\t\tthis._makeGrad();\n\t}\n\n\t/**\n\t * Set dimensions of analyzer's canvas\n\t *\n\t * @param {number} w width in pixels\n\t * @param {number} h height in pixels\n\t */\n\tsetCanvasSize( w, h ) {\n\t\tthis._width = w;\n\t\tthis._height = h;\n\t\tthis._setCanvas('user');\n\t}\n\n\t/**\n\t * Set desired frequency range\n\t *\n\t * @param {number} min lowest frequency represented in the x-axis\n\t * @param {number} max highest frequency represented in the x-axis\n\t */\n\tsetFreqRange( min, max ) {\n\t\tif ( min < 1 || max < 1 )\n\t\t\tthrow new AudioMotionError( 'ERR_FREQUENCY_TOO_LOW', `Frequency values must be >= 1` );\n\t\telse {\n\t\t\tthis._minFreq = Math.min( min, max );\n\t\t\tthis._maxFreq = Math.max( min, max );\n\t\t\tthis._calcBars();\n\t\t}\n\t}\n\n\t/**\n\t * Set custom parameters for LED effect\n\t * If called with no arguments or if any property is invalid, clears any previous custom parameters\n\t *\n\t * @param {object} [params]\n\t */\n\tsetLedParams( params ) {\n\t\tlet maxLeds, spaceV, spaceH;\n\n\t\t// coerce parameters to Number; `NaN` results are rejected in the condition below\n\t\tif ( params ) {\n\t\t\tmaxLeds = params.maxLeds | 0, // ensure integer\n\t\t\tspaceV  = +params.spaceV,\n\t\t\tspaceH  = +params.spaceH;\n\t\t}\n\n\t\tthis._ledParams = maxLeds > 0 && spaceV > 0 && spaceH >= 0 ? [ maxLeds, spaceV, spaceH ] : undefined;\n\t\tthis._calcLeds();\n\t}\n\n\t/**\n\t * Shorthand function for setting several options at once\n\t *\n\t * @param {object} options\n\t */\n\tsetOptions( options ) {\n\t\tthis._setProps( options );\n\t}\n\n\t/**\n\t * Adjust the analyzer's sensitivity\n\t *\n\t * @param {number} min minimum decibels value\n\t * @param {number} max maximum decibels value\n\t */\n\tsetSensitivity( min, max ) {\n\t\tfor ( const i of [0,1] ) {\n\t\t\tthis._analyzer[ i ].minDecibels = Math.min( min, max );\n\t\t\tthis._analyzer[ i ].maxDecibels = Math.max( min, max );\n\t\t}\n\t}\n\n\t/**\n\t * Start / stop canvas animation\n\t *\n\t * @param {boolean} [value] if undefined, inverts the current status\n\t * @returns {boolean} resulting status after the change\n\t */\n\ttoggleAnalyzer( value ) {\n\t\tconst started = this.isOn;\n\n\t\tif ( value === undefined )\n\t\t\tvalue = ! started;\n\n\t\tif ( started && ! value ) {\n\t\t\tcancelAnimationFrame( this._runId );\n\t\t\tthis._runId = undefined;\n\t\t}\n\t\telse if ( ! started && value ) {\n\t\t\tthis._frame = this._fps = 0;\n\t\t\tthis._time = performance.now();\n\t\t\tthis._runId = requestAnimationFrame( timestamp => this._draw( timestamp ) );\n\t\t}\n\n\t\treturn this.isOn;\n\t}\n\n\t/**\n\t * Toggles canvas full-screen mode\n\t */\n\ttoggleFullscreen() {\n\t\tif ( this.isFullscreen ) {\n\t\t\tif ( document.exitFullscreen )\n\t\t\t\tdocument.exitFullscreen();\n\t\t\telse if ( document.webkitExitFullscreen )\n\t\t\t\tdocument.webkitExitFullscreen();\n\t\t}\n\t\telse {\n\t\t\tconst fsEl = this._fsEl;\n\t\t\tif ( fsEl.requestFullscreen )\n\t\t\t\tfsEl.requestFullscreen();\n\t\t\telse if ( fsEl.webkitRequestFullscreen )\n\t\t\t\tfsEl.webkitRequestFullscreen();\n\t\t}\n\t}\n\n\t/**\n\t * ==========================================================================\n\t *\n\t * PRIVATE METHODS\n\t *\n\t * ==========================================================================\n\t */\n\n\t/**\n\t * Calculate auxiliary values and flags\n\t */\n\t_calcAux() {\n\t\tconst canvas   = this.canvas,\n\t\t\t  isRadial = this._radial,\n\t\t\t  isDual   = this._stereo && ! isRadial,\n\t\t\t  centerX  = canvas.width >> 1;\n\n\t\tthis._radius         = Math.min( canvas.width, canvas.height ) * ( this._stereo ? .375 : .125 ) | 0;\n\t\tthis._barSpacePx     = Math.min( this._barWidth - 1, ( this._barSpace > 0 && this._barSpace < 1 ) ? this._barWidth * this._barSpace : this._barSpace );\n\t\tthis._isOctaveBands  = this._mode % 10 != 0;\n\t\tthis._isLedDisplay   = this._showLeds && this._isOctaveBands && ! isRadial;\n\t\tthis._isLumiBars     = this._lumiBars && this._isOctaveBands && ! isRadial;\n\t\tthis._isAlphaBars    = this._alphaBars && ! this._isLumiBars && this._mode != 10;\n\t\tthis._isOutline      = this._outlineBars && this._isOctaveBands && ! this._isLumiBars && ! this._isLedDisplay;\n\t\tthis._maximizeLeds   = ! this._stereo || this._reflexRatio > 0 && ! this._isLumiBars;\n\n\t\tthis._channelHeight  = canvas.height - ( isDual && ! this._isLedDisplay ? .5 : 0 ) >> isDual;\n\t\tthis._analyzerHeight = this._channelHeight * ( this._isLumiBars || isRadial ? 1 : 1 - this._reflexRatio ) | 0;\n\n\t\t// channelGap is **0** if isLedDisplay == true (LEDs already have spacing); **1** if canvas height is odd (windowed); **2** if it's even\n\t\t// TODO: improve this, make it configurable?\n\t\tthis._channelGap     = isDual ? canvas.height - this._channelHeight * 2 : 0;\n\n\t\tthis._analyzerWidth  = canvas.width - centerX * ( this._mirror != 0 );\n\t\tthis._initialX       = centerX * ( this._mirror == -1 && ! isRadial );\n\t}\n\n\t/**\n\t * Precalculate the actual X-coordinate on screen for each analyzer bar\n\t */\n\t_calcBars() {\n\t\t/*\n\t \t   Since the frequency scale is logarithmic, each position in the X-axis actually represents a power of 10.\n\t \t   To improve performace, the position of each frequency is calculated in advance and stored in an array.\n\t \t   Canvas space usage is optimized to accommodate exactly the frequency range the user needs.\n\t \t   Positions need to be recalculated whenever the frequency range, FFT size or canvas size change.\n\n\t \t                                +-------------------------- canvas --------------------------+\n\t \t                                |                                                            |\n\t \t      |-------------------|-----|-------------|-------------------!-------------------|------|------------|\n\t \t      1                  10     |            100                  1K                 10K     |           100K (Hz)\n\t \t   (10^0)              (10^1)   |          (10^2)               (10^3)              (10^4)   |          (10^5)\n\t \t                                |-------------|<--- logWidth ---->|--------------------------|\n\t \t                    minFreq--> 20                   (pixels)                                22K <--maxFreq\n\t \t                            (10^1.3)                                                     (10^4.34)\n\t \t                             minLog\n\t \t*/\n\n\t\tconst bars = this._bars = []; // initialize object property\n\n\t\tif ( ! this._ready )\n\t\t\treturn;\n\n\t\t// helper functions\n\t\tconst binToFreq = bin => bin * this.audioCtx.sampleRate / this.fftSize || 1; // returns 1 for bin 0\n\t\tconst barsPush  = ( posX, binLo, binHi, freqLo, freqHi, ratioLo, ratioHi ) => bars.push( { posX, binLo, binHi, freqLo, freqHi, ratioLo, ratioHi, peak: [0,0], hold: [0], value: [0] } );\n\n\t\tconst analyzerWidth = this._analyzerWidth,\n\t\t\t  initialX      = this._initialX,\n\t\t\t  maxFreq       = this._maxFreq,\n\t\t\t  minFreq       = this._minFreq;\n\n\t\tlet minLog,\tlogWidth;\n\n\t\tif ( this._isOctaveBands ) {\n\n\t\t\t// generate a 11-octave 24-tone equal tempered scale (16Hz to 33kHz)\n\n\t\t\t/*\n\t\t\t\tA simple linear interpolation is used to obtain an approximate amplitude value for the desired frequency\n\t\t\t\tfrom available FFT data, like so:\n\n\t\t\t\th = hLo + ( hHi - hLo ) * ( f - fLo ) / ( fHi - fLo )\n\t\t\t\t                         \\___________________________/\n\t\t\t\t                                       |\n\t\t\t\t                                     ratio\n\t\t\t\twhere:\n\n\t\t\t\tf   - desired frequency\n\t\t\t\th   - amplitude of desired frequency\n\t\t\t\tfLo - frequency represented by the lower FFT bin\n\t\t\t\tfHi - frequency represented by the higher FFT bin\n\t\t\t\thLo - amplitude of fLo\n\t\t\t\thHi - amplitude of fHi\n\n\t\t\t\tratio is calculated in advance here, to reduce computational complexity during real-time rendering in the _draw() function\n\t\t\t*/\n\n\t\t\tlet temperedScale = [];\n\n\t\t\tfor ( let octave = 0; octave < 11; octave++ ) {\n\t\t\t\tfor ( let note = 0; note < 24; note++ ) {\n\n\t\t\t\t\tconst freq     = C0 * ROOT24 ** ( octave * 24 + note ),\n\t\t\t\t\t\t  bin      = this._freqToBin( freq, 'floor' ),\n\t\t\t\t\t\t  binFreq  = binToFreq( bin ),\n\t\t\t\t\t\t  nextFreq = binToFreq( bin + 1 ),\n\t\t\t\t\t\t  ratio    = ( freq - binFreq ) / ( nextFreq - binFreq );\n\n\t\t\t\t\ttemperedScale.push( { freq, bin, ratio } );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// generate the frequency bands according to current analyzer settings\n\n\t\t\tconst steps = [0,1,2,3,4,6,8,12,24][ this._mode ]; // number of notes grouped per band for each mode\n\n\t\t\tfor ( let index = 0; index < temperedScale.length; index += steps ) {\n\t\t\t\tlet { freq: freqLo, bin: binLo, ratio: ratioLo } = temperedScale[ index ],             // band start\n\t\t\t\t\t{ freq: freqHi, bin: binHi, ratio: ratioHi } = temperedScale[ index + steps - 1 ]; // band end\n\n\t\t\t\tconst nBars   = bars.length,\n\t\t\t\t\t  prevBar = bars[ nBars - 1 ];\n\n\t\t\t\t// if the ending frequency is out of range, we're done here\n\t\t\t\tif ( freqHi > maxFreq || binHi >= this.fftSize / 2 ) {\n\t\t\t\t\tprevBar.binHi++;     // add an extra bin to the last bar, to fully include the last valid band\n\t\t\t\t\tprevBar.ratioHi = 0; // disable interpolation\n\t\t\t\t\tprevBar.freqHi = binToFreq( prevBar.binHi ); // update ending frequency\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// is the starting frequency in the selected range?\n\t\t\t\tif ( freqLo >= minFreq ) {\n\t\t\t\t\tif ( nBars > 0 ) {\n\t\t\t\t\t\tconst diff = binLo - prevBar.binHi;\n\n\t\t\t\t\t\t// check if we skipped any available FFT bins since the last bar\n\t\t\t\t\t\tif ( diff > 1 ) {\n\t\t\t\t\t\t\t// allocate half of the unused bins to the previous bar\n\t\t\t\t\t\t\tprevBar.binHi = binLo - ( diff >> 1 );\n\t\t\t\t\t\t\tprevBar.ratioHi = 0;\n\t\t\t\t\t\t\tprevBar.freqHi = binToFreq( prevBar.binHi ); // update ending frequency\n\n\t\t\t\t\t\t\t// if the previous bar doesn't share any bins with other bars, no need for interpolation\n\t\t\t\t\t\t\tif ( nBars > 1 && prevBar.binHi > prevBar.binLo && prevBar.binLo > bars[ nBars - 2 ].binHi ) {\n\t\t\t\t\t\t\t\tprevBar.ratioLo = 0;\n\t\t\t\t\t\t\t\tprevBar.freqLo = binToFreq( prevBar.binLo ); // update starting frequency\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// start the current bar at the bin following the last allocated bin\n\t\t\t\t\t\t\tbinLo = prevBar.binHi + 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if the lower bin is not shared with the ending frequency nor the previous bar, no need to interpolate it\n\t\t\t\t\t\tif ( binHi > binLo && binLo > prevBar.binHi ) {\n\t\t\t\t\t\t\tratioLo = 0;\n\t\t\t\t\t\t\tfreqLo = binToFreq( binLo );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbarsPush( 0, binLo, binHi, freqLo, freqHi, ratioLo, ratioHi );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._barWidth = analyzerWidth / bars.length;\n\n\t\t\tbars.forEach( ( bar, index ) => bar.posX = initialX + index * this._barWidth );\n\n\t\t\tminLog = Math.log10( bars[0].freqLo );\n\t\t\tlogWidth = analyzerWidth / ( Math.log10( bars[ bars.length - 1 ].freqHi ) - minLog );\n\t\t}\n\t\telse {\n\n\t\t\t// Discrete frequencies modes\n\n\t\t\tthis._barWidth = 1;\n\n\t\t\tminLog = Math.log10( minFreq );\n\t\t\tlogWidth = analyzerWidth / ( Math.log10( maxFreq ) - minLog );\n\n\t\t\tconst minIndex = this._freqToBin( minFreq, 'floor' ),\n\t\t\t\t  maxIndex = this._freqToBin( maxFreq );\n\n\t \t\tlet lastPos = -999;\n\n\t\t\tfor ( let i = minIndex; i <= maxIndex; i++ ) {\n\t\t\t\tconst freq = binToFreq( i ), // frequency represented by this index\n\t\t\t\t\t  pos  = initialX + Math.round( logWidth * ( Math.log10( freq ) - minLog ) ); // avoid fractionary pixel values\n\n\t\t\t\t// if it's on a different X-coordinate, create a new bar for this frequency\n\t\t\t\tif ( pos > lastPos ) {\n\t\t\t\t\tbarsPush( pos, i, i, freq, freq, 0, 0 );\n\t\t\t\t\tlastPos = pos;\n\t\t\t\t} // otherwise, add this frequency to the last bar's range\n\t\t\t\telse if ( bars.length ) {\n\t\t\t\t\tbars[ bars.length - 1 ].binHi = i;\n\t\t\t\t\tbars[ bars.length - 1 ].freqHi = freq;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// save these for scale generation\n\t\tthis._minLog = minLog;\n\t\tthis._logWidth = logWidth;\n\n\t\t// update internal variables\n\t\tthis._calcAux();\n\n\t\t// generate the X-axis and radial scales\n\t\tthis._createScales();\n\n\t\t// update LED properties\n\t\tthis._calcLeds();\n\t}\n\n\t/**\n\t * Calculate attributes for the vintage LEDs effect, based on visualization mode and canvas resolution\n\t */\n\t_calcLeds() {\n\t\tif ( ! this._isOctaveBands || ! this._ready )\n\t\t\treturn;\n\n\t\t// adjustment for high pixel-ratio values on low-resolution screens (Android TV)\n\t\tconst dPR = this._pixelRatio / ( window.devicePixelRatio > 1 && window.screen.height <= 540 ? 2 : 1 );\n\n\t\tconst params = [ [],\n\t\t\t[ 128,  3, .45  ], // mode 1\n\t\t\t[ 128,  4, .225 ], // mode 2\n\t\t\t[  96,  6, .225 ], // mode 3\n\t\t\t[  80,  6, .225 ], // mode 4\n\t\t\t[  80,  6, .125 ], // mode 5\n\t\t\t[  64,  6, .125 ], // mode 6\n\t\t\t[  48,  8, .125 ], // mode 7\n\t\t\t[  24, 16, .125 ], // mode 8\n\t\t];\n\n\t\t// use custom LED parameters if set, or the default parameters for the current mode\n\t\tconst customParams = this._ledParams,\n\t\t\t  [ maxLeds, spaceVRatio, spaceHRatio ] = customParams || params[ this._mode ];\n\n\t\tlet ledCount, spaceV,\n\t\t\tanalyzerHeight = this._analyzerHeight;\n\n\t\tif ( customParams ) {\n\t\t\tconst minHeight = 2 * dPR;\n\t\t\tlet blockHeight;\n\t\t\tledCount = maxLeds + 1;\n\t\t\tdo {\n\t\t\t\tledCount--;\n\t\t\t\tblockHeight = analyzerHeight / ledCount / ( 1 + spaceVRatio );\n\t\t\t\tspaceV = blockHeight * spaceVRatio;\n\t\t\t} while ( ( blockHeight < minHeight || spaceV < minHeight ) && ledCount > 1 );\n\t\t}\n\t\telse {\n\t\t\t// calculate vertical spacing - aim for the reference ratio, but make sure it's at least 2px\n\t\t\tconst refRatio = 540 / spaceVRatio;\n\t\t\tspaceV = Math.min( spaceVRatio * dPR, Math.max( 2, analyzerHeight / refRatio + .1 | 0 ) );\n\t\t}\n\n\t\t// remove the extra spacing below the last line of LEDs\n\t\tif ( this._maximizeLeds )\n\t\t\tanalyzerHeight += spaceV;\n\n\t\t// recalculate the number of leds, considering the effective spaceV\n\t\tif ( ! customParams )\n\t\t\tledCount = Math.min( maxLeds, analyzerHeight / ( spaceV * 2 ) | 0 );\n\n\t\tthis._leds = [\n\t\t\tledCount,\n\t\t\tspaceHRatio >= 1 ? spaceHRatio : this._barWidth * spaceHRatio, // spaceH\n\t\t\tspaceV,\n\t\t\tanalyzerHeight / ledCount - spaceV // ledHeight\n\t\t];\n\t}\n\n\t/**\n\t * Generate the X-axis and radial scales in auxiliary canvases\n\t */\n\t_createScales() {\n\t\tconst freqLabels  = [ 16, 31, 63, 125, 250, 500, 1000, 2000, 4000, 8000, 16000 ],\n\t\t\t  canvas      = this._canvasCtx.canvas,\n\t\t\t  scaleX      = this._scaleX,\n\t\t\t  scaleR      = this._scaleR,\n\t\t\t  canvasX     = scaleX.canvas,\n\t\t\t  canvasR     = scaleR.canvas,\n\t\t\t  scaleHeight = Math.min( canvas.width, canvas.height ) * .03 | 0; // circular scale height (radial mode)\n\n\t\t// in radial stereo mode, the scale is positioned exactly between both channels, by making the canvas a bit larger than the central diameter\n\t\tcanvasR.width = canvasR.height = ( this._radius << 1 ) + ( this._stereo * scaleHeight );\n\n\t\tconst radius  = canvasR.width >> 1, // this is also used as the center X and Y coordinates of the circular scale canvas\n\t\t\t  radialY = radius - scaleHeight * .7;\t// vertical position of text labels in the circular scale\n\n\t\t// helper function\n\t\tconst radialLabel = ( x, label ) => {\n\t\t\tconst angle  = TAU * ( x / canvas.width ),\n\t\t\t\t  adjAng = angle - HALF_PI, // rotate angles so 0 is at the top\n\t\t\t\t  posX   = radialY * Math.cos( adjAng ),\n\t\t\t\t  posY   = radialY * Math.sin( adjAng );\n\n\t\t\tscaleR.save();\n\t\t\tscaleR.translate( radius + posX, radius + posY );\n\t\t\tscaleR.rotate( angle );\n\t\t\tscaleR.fillText( label, 0, 0 );\n\t\t\tscaleR.restore();\n\t\t}\n\n\t\t// clear scale canvas\n\t\tcanvasX.width |= 0;\n\n\t\tscaleX.fillStyle = scaleR.strokeStyle = '#000c';\n\t\tscaleX.fillRect( 0, 0, canvasX.width, canvasX.height );\n\n\t\tscaleR.arc( radius, radius, radius - scaleHeight / 2, 0, TAU );\n\t\tscaleR.lineWidth = scaleHeight;\n\t\tscaleR.stroke();\n\n\t\tscaleX.fillStyle = scaleR.fillStyle = '#fff';\n\t\tscaleX.font = `${ canvasX.height >> 1 }px sans-serif`;\n\t\tscaleR.font = `${ scaleHeight >> 1 }px sans-serif`;\n\t\tscaleX.textAlign = scaleR.textAlign = 'center';\n\n\t\tfor ( const freq of freqLabels ) {\n\t\t\tconst label = ( freq >= 1000 ) ? `${ freq / 1000 }k` : freq,\n\t\t\t\t  x     = this._logWidth * ( Math.log10( freq ) - this._minLog );\n\n\t\t\tif ( x >= 0 && x <= this._analyzerWidth ) {\n\t\t\t\tscaleX.fillText( label, this._initialX + x, canvasX.height * .75 );\n\t\t\t\tif ( x < this._analyzerWidth ) // avoid wrapping-around the last label and overlapping the first one\n\t\t\t\t\tradialLabel( x, label );\n\n\t\t\t\tif ( this._mirror ) {\n\t\t\t\t\tscaleX.fillText( label, ( this._initialX || canvas.width ) - x, canvasX.height * .75 );\n\t\t\t\t\tif ( x > 10 ) // avoid overlapping of first labels on mirror mode\n\t\t\t\t\t\tradialLabel( -x, label );\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Redraw the canvas\n\t * this is called 60 times per second by requestAnimationFrame()\n\t */\n\t_draw( timestamp ) {\n\t\tconst ctx            = this._canvasCtx,\n\t\t\t  canvas         = ctx.canvas,\n\t\t\t  canvasX        = this._scaleX.canvas,\n\t\t\t  canvasR        = this._scaleR.canvas,\n\t\t\t  energy         = this._energy,\n\t\t\t  mode           = this._mode,\n\t\t\t  isAlphaBars    = this._isAlphaBars,\n\t\t\t  isLedDisplay   = this._isLedDisplay,\n\t\t\t  isLumiBars     = this._isLumiBars,\n\t\t\t  isOctaveBands  = this._isOctaveBands,\n\t\t\t  isOutline      = this._isOutline,\n\t\t\t  isRadial       = this._radial,\n\t\t\t  isStereo       = this._stereo,\n\t\t\t  lineWidth      = +this.lineWidth, // make sure the damn thing is a number!\n\t\t\t  mirrorMode     = this._mirror,\n\t\t\t  channelHeight  = this._channelHeight,\n\t\t\t  channelGap     = this._channelGap,\n\t\t\t  analyzerHeight = this._analyzerHeight,\n\t\t\t  analyzerWidth  = isRadial ? canvas.width : this._analyzerWidth,\n\t\t\t  initialX       = this._initialX,\n\t\t\t  finalX         = initialX + analyzerWidth,\n\t\t\t  centerX        = canvas.width >> 1,\n\t\t\t  centerY        = canvas.height >> 1,\n\t\t\t  radius         = this._radius,\n\t\t\t  maxBarHeight   = isRadial ? Math.min( centerX, centerY ) - radius : analyzerHeight,\n\t\t\t  useCanvas      = this.useCanvas;\n\n\t\tif ( energy.val > 0 )\n\t\t\tthis._spinAngle += this._spinSpeed * RPM;\n\n\t\tconst strokeIf = flag => {\n\t\t\tif ( flag && lineWidth ) {\n\t\t\t\tconst alpha = ctx.globalAlpha;\n\t\t\t\tctx.globalAlpha = 1;\n\t\t\t\tctx.stroke();\n\t\t\t\tctx.globalAlpha = alpha;\n\t\t\t}\n\t\t}\n\n\t\t// helper function - convert planar X,Y coordinates to radial coordinates\n\t\tconst radialXY = ( x, y, dir ) => {\n\t\t\tconst height = radius + y,\n\t\t\t\t  angle  = dir * TAU * ( x / canvas.width ) + this._spinAngle;\n\n\t\t\treturn [ centerX + height * Math.cos( angle ), centerY + height * Math.sin( angle ) ];\n\t\t}\n\n\t\t// helper function - draw a polygon of width `w` and height `h` at (x,y) in radial mode\n\t\tconst radialPoly = ( x, y, w, h, stroke ) => {\n\t\t\tctx.beginPath();\n\t\t\tfor ( const dir of ( mirrorMode ? [1,-1] : [1] ) ) {\n\t\t\t\tctx.moveTo( ...radialXY( x, y, dir ) );\n\t\t\t\tctx.lineTo( ...radialXY( x, y + h, dir ) );\n\t\t\t\tctx.lineTo( ...radialXY( x + w, y + h, dir ) );\n\t\t\t\tctx.lineTo( ...radialXY( x + w, y, dir ) );\n\t\t\t}\n\n\t\t\tstrokeIf( stroke );\n\t\t\tctx.fill();\n\t\t}\n\n\t\t// LED attributes and helper function for bar height calculation\n\t\tconst [ ledCount, ledSpaceH, ledSpaceV, ledHeight ] = this._leds || [];\n\t\tconst ledPosY = height => ( height * ledCount | 0 ) * ( ledHeight + ledSpaceV ) - ledSpaceV;\n\n\t\t// select background color\n\t\tconst bgColor = ( ! this.showBgColor || isLedDisplay && ! this.overlay ) ? '#000' : this._gradients[ this._gradient ].bgColor;\n\n\t\t// compute the effective bar width, considering the selected bar spacing\n\t\t// if led effect is active, ensure at least the spacing from led definitions\n\t\tlet width = this._barWidth - ( ! isOctaveBands ? 0 : Math.max( isLedDisplay ? ledSpaceH : 0, this._barSpacePx ) );\n\n\t\t// make sure width is integer for pixel accurate calculation, when no bar spacing is required\n\t\tif ( this._barSpace == 0 && ! isLedDisplay )\n\t\t\twidth |= 0;\n\n\t\tlet currentEnergy = 0;\n\n\t\tconst nBars = this._bars.length;\n\n\t\tfor ( let channel = 0; channel < isStereo + 1; channel++ ) {\n\n\t\t\tconst channelTop     = channelHeight * channel + channelGap * channel,\n\t\t\t\t  channelBottom  = channelTop + channelHeight,\n\t\t\t\t  analyzerBottom = channelTop + analyzerHeight - ( isLedDisplay && ! this._maximizeLeds ? ledSpaceV : 0 );\n\n\t\t\tif ( useCanvas ) {\n\t\t\t\t// clear the channel area, if in overlay mode\n\t\t\t\t// this is done per channel to clear any residue below 0 off the top channel (especially in line graph mode with lineWidth > 1)\n\t\t\t\tif ( this.overlay )\n\t\t\t\t\tctx.clearRect( 0, channelTop - channelGap, canvas.width, channelHeight + channelGap );\n\n\t\t\t\t// fill the analyzer background if needed (not overlay or overlay + showBgColor)\n\t\t\t\tif ( ! this.overlay || this.showBgColor ) {\n\t\t\t\t\tif ( this.overlay )\n\t\t\t\t\t\tctx.globalAlpha = this.bgAlpha;\n\n\t\t\t\t\tctx.fillStyle = bgColor;\n\n\t\t\t\t\t// exclude the reflection area when overlay is true and reflexAlpha == 1 (avoids alpha over alpha difference, in case bgAlpha < 1)\n\t\t\t\t\tif ( ! isRadial || channel == 0 )\n\t\t\t\t\t\tctx.fillRect( initialX, channelTop - channelGap, analyzerWidth, ( this.overlay && this.reflexAlpha == 1 ? analyzerHeight : channelHeight ) + channelGap );\n\n\t\t\t\t\tctx.globalAlpha = 1;\n\t\t\t\t}\n\n\t\t\t\t// draw dB scale (Y-axis)\n\t\t\t\tif ( this.showScaleY && ! isLumiBars && ! isRadial ) {\n\t\t\t\t\tconst scaleWidth = canvasX.height,\n\t\t\t\t\t\t  fontSize   = scaleWidth >> 1,\n\t\t\t\t\t\t  mindB      = this._analyzer[0].minDecibels,\n\t\t\t\t\t\t  maxdB      = this._analyzer[0].maxDecibels,\n\t\t\t\t\t\t  interval   = analyzerHeight / ( maxdB - mindB );\n\n\t\t\t\t\tctx.fillStyle = '#888';\n\t\t\t\t\tctx.font = `${fontSize}px sans-serif`;\n\t\t\t\t\tctx.textAlign = 'right';\n\t\t\t\t\tctx.lineWidth = 1;\n\n\t\t\t\t\tfor ( let db = maxdB; db > mindB; db -= 5 ) {\n\t\t\t\t\t\tconst posY = channelTop + ( maxdB - db ) * interval,\n\t\t\t\t\t\t\t  even = ( db % 2 == 0 ) | 0;\n\n\t\t\t\t\t\tif ( even ) {\n\t\t\t\t\t\t\tconst labelY = posY + fontSize * ( posY == channelTop ? .8 : .35 );\n\t\t\t\t\t\t\tif ( mirrorMode != -1 )\n\t\t\t\t\t\t\t\tctx.fillText( db, scaleWidth * .85, labelY );\n\t\t\t\t\t\t\tif ( mirrorMode != 1 )\n\t\t\t\t\t\t\t\tctx.fillText( db, canvas.width - scaleWidth * .1, labelY );\n\t\t\t\t\t\t\tctx.strokeStyle = '#888';\n\t\t\t\t\t\t\tctx.setLineDash([2,4]);\n\t\t\t\t\t\t\tctx.lineDashOffset = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tctx.strokeStyle = '#555';\n\t\t\t\t\t\t\tctx.setLineDash([2,8]);\n\t\t\t\t\t\t\tctx.lineDashOffset = 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.moveTo( initialX + scaleWidth * even * ( mirrorMode != -1 ), ~~posY + .5 ); // for sharp 1px line (https://stackoverflow.com/a/13879402/2370385)\n\t\t\t\t\t\tctx.lineTo( finalX - scaleWidth * even * ( mirrorMode != 1 ), ~~posY + .5 );\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\t\t\t\t\t// restore line properties\n\t\t\t\t\tctx.setLineDash([]);\n\t\t\t\t\tctx.lineDashOffset = 0;\n\t\t\t\t}\n\n\t\t\t\t// set line width and dash for LEDs effect\n\t\t\t\tif ( isLedDisplay ) {\n\t\t\t\t\tctx.setLineDash( [ ledHeight, ledSpaceV ] );\n\t\t\t\t\tctx.lineWidth = width;\n\t\t\t\t}\n\t\t\t\telse // for outline effect ensure linewidth is not greater than half the bar width\n\t\t\t\t\tctx.lineWidth = isOutline ? Math.min( lineWidth, width / 2 ) : lineWidth;\n\n\t\t\t\t// set selected gradient for fill and stroke\n\t\t\t\tctx.fillStyle = ctx.strokeStyle = this._canvasGradient;\n\t\t\t} // if ( useCanvas )\n\n\t\t\t// get a new array of data from the FFT\n\t\t\tconst fftData = this._fftData[ channel ];\n\t\t\tthis._analyzer[ channel ].getByteFrequencyData( fftData );\n\n\t\t\t// helper function for FFT data interpolation\n\t\t\tconst interpolate = ( bin, ratio ) => fftData[ bin ] + ( fftData[ bin + 1 ] - fftData[ bin ] ) * ratio;\n\n\t\t\t// start drawing path (for mode 10)\n\t\t\tctx.beginPath();\n\n\t\t\t// store line graph points to create mirror effect in radial mode\n\t\t\tlet points = [];\n\n\t\t\t// draw bars / lines\n\n\t\t\tfor ( let i = 0; i < nBars; i++ ) {\n\n\t\t\t\tconst bar = this._bars[ i ],\n\t\t\t\t\t  { binLo, binHi, ratioLo, ratioHi } = bar;\n\n\t\t\t\tlet barHeight = Math.max( interpolate( binLo, ratioLo ), interpolate( binHi, ratioHi ) );\n\n\t\t\t\t// check additional bins (if any) for this bar and keep the highest value\n\t\t\t\tfor ( let j = binLo + 1; j < binHi; j++ ) {\n\t\t\t\t\tif ( fftData[ j ] > barHeight )\n\t\t\t\t\t\tbarHeight = fftData[ j ];\n\t\t\t\t}\n\n\t\t\t\tbarHeight /= 255;\n\t\t\t\tbar.value[ channel ] = barHeight;\n\t\t\t\tcurrentEnergy += barHeight;\n\n\t\t\t\t// update bar peak\n\t\t\t\tif ( bar.peak[ channel ] > 0 ) {\n\t\t\t\t\tbar.hold[ channel ]--;\n\t\t\t\t\t// if hold is negative, it becomes the \"acceleration\" for peak drop\n\t\t\t\t\tif ( bar.hold[ channel ] < 0 )\n\t\t\t\t\t\tbar.peak[ channel ] += bar.hold[ channel ] / maxBarHeight;\n\t\t\t\t}\n\n\t\t\t\t// check if it's a new peak for this bar\n\t\t\t\tif ( barHeight >= bar.peak[ channel ] ) {\n\t\t\t\t\tbar.peak[ channel ] = barHeight;\n\t\t\t\t\tbar.hold[ channel ] = 30; // set peak hold time to 30 frames (0.5s)\n\t\t\t\t}\n\n\t\t\t\t// if not using the canvas, move earlier to the next bar\n\t\t\t\tif ( ! useCanvas )\n\t\t\t\t\tcontinue;\n\n\t\t\t\t// set opacity for bar effects\n\t\t\t\tif ( isLumiBars || isAlphaBars )\n\t\t\t\t\tctx.globalAlpha = barHeight;\n\t\t\t\telse if ( isOutline )\n\t\t\t\t\tctx.globalAlpha = this.fillAlpha;\n\n\t\t\t\t// normalize barHeight\n\t\t\t\tif ( isLedDisplay ) {\n\t\t\t\t\tbarHeight = ledPosY( barHeight );\n\t\t\t\t\tif ( barHeight < 0 )\n\t\t\t\t\t\tbarHeight = 0; // prevent showing leds below 0 when overlay and reflex are active\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbarHeight = barHeight * maxBarHeight | 0;\n\n\t\t\t\t// invert bar for radial channel 1\n\t\t\t\tif ( isRadial && channel == 1 )\n\t\t\t\t\tbarHeight *= -1;\n\n\t\t\t\t// bar width may need small adjustments for some bars, when barSpace == 0\n\t\t\t\tlet adjWidth = width,\n\t\t\t\t\tposX     = bar.posX;\n\n\t\t\t\t// Draw current bar or line segment\n\n\t\t\t\tif ( mode == 10 ) {\n\t\t\t\t\t// compute the average between the initial bar (i==0) and the next one\n\t\t\t\t\t// used to smooth the curve when the initial posX is off the screen, in mirror and radial modes\n\t\t\t\t\tconst nextBarAvg = i ? 0 : ( fftData[ this._bars[1].binLo ] / 255 * maxBarHeight * ( ! isRadial || ! channel || - 1 ) + barHeight ) / 2;\n\n\t\t\t\t\tif ( isRadial ) {\n\t\t\t\t\t\tif ( i == 0 )\n\t\t\t\t\t\t\tctx.lineTo( ...radialXY( 0, ( posX < 0 ? nextBarAvg : barHeight ), 1 ) );\n\t\t\t\t\t\t// draw line to the current point, avoiding overlapping wrap-around frequencies\n\t\t\t\t\t\tif ( posX >= 0 ) {\n\t\t\t\t\t\t\tconst point = [ posX, barHeight ];\n\t\t\t\t\t\t\tctx.lineTo( ...radialXY( ...point, 1 ) );\n\t\t\t\t\t\t\tpoints.push( point );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse { // Linear\n\t\t\t\t\t\tif ( i == 0 ) {\n\t\t\t\t\t\t\t// start the line off-screen using the previous FFT bin value as the initial amplitude\n\t\t\t\t\t\t\tif ( mirrorMode != -1 ) {\n\t\t\t\t\t\t\t\tconst prevFFTData = binLo ? fftData[ binLo - 1 ] / 255 * maxBarHeight : barHeight; // use previous FFT bin value, when available\n\t\t\t\t\t\t\t\tctx.moveTo( initialX - lineWidth, analyzerBottom - prevFFTData );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tctx.moveTo( initialX, analyzerBottom - ( posX < initialX ? nextBarAvg : barHeight ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// draw line to the current point\n\t\t\t\t\t\t// avoid X values lower than the origin when mirroring left, otherwise draw them for best graph accuracy\n\t\t\t\t\t\tif ( mirrorMode != -1 || posX >= initialX )\n\t\t\t\t\t\t\tctx.lineTo( posX, analyzerBottom - barHeight );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif ( mode > 0 ) {\n\t\t\t\t\t\tif ( isLedDisplay )\n\t\t\t\t\t\t\tposX += Math.max( ledSpaceH / 2, this._barSpacePx / 2 );\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif ( this._barSpace == 0 ) {\n\t\t\t\t\t\t\t\tposX |= 0;\n\t\t\t\t\t\t\t\tif ( i > 0 && posX > this._bars[ i - 1 ].posX + width ) {\n\t\t\t\t\t\t\t\t\tposX--;\n\t\t\t\t\t\t\t\t\tadjWidth++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tposX += this._barSpacePx / 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isLedDisplay ) {\n\t\t\t\t\t\tconst x = posX + width / 2;\n\t\t\t\t\t\t// draw \"unlit\" leds\n\t\t\t\t\t\tif ( this.showBgColor && ! this.overlay ) {\n\t\t\t\t\t\t\tconst alpha = ctx.globalAlpha;\n\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\tctx.moveTo( x, channelTop );\n\t\t\t\t\t\t\tctx.lineTo( x, analyzerBottom );\n\t\t\t\t\t\t\tctx.strokeStyle = '#7f7f7f22';\n\t\t\t\t\t\t\tctx.globalAlpha = 1;\n\t\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t\t\t// restore properties\n\t\t\t\t\t\t\tctx.strokeStyle = ctx.fillStyle;\n\t\t\t\t\t\t\tctx.globalAlpha = alpha;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\tctx.moveTo( x, isLumiBars ? channelTop : analyzerBottom );\n\t\t\t\t\t\tctx.lineTo( x, isLumiBars ? channelBottom : analyzerBottom - barHeight );\n\t\t\t\t\t\tctx.stroke();\n\t\t\t\t\t}\n\t\t\t\t\telse if ( posX >= initialX ) {\n\t\t\t\t\t\tif ( isRadial )\n\t\t\t\t\t\t\tradialPoly( posX, 0, adjWidth, barHeight, isOutline );\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tconst x = posX,\n\t\t\t\t\t\t\t\t  y = isLumiBars ? channelTop : analyzerBottom,\n\t\t\t\t\t\t\t\t  w = adjWidth,\n\t\t\t\t\t\t\t\t  h = isLumiBars ? channelBottom : -barHeight;\n\n\t\t\t\t\t\t\tctx.beginPath();\n\t\t\t\t\t\t\tctx.moveTo( x, y );\n\t\t\t\t\t\t\tctx.lineTo( x, y + h );\n\t\t\t\t\t\t\tctx.lineTo( x + w, y + h );\n\t\t\t\t\t\t\tctx.lineTo( x + w, y );\n\n\t\t\t\t\t\t\tstrokeIf( isOutline );\n\t\t\t\t\t\t\tctx.fill();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Draw peak\n\t\t\t\tconst peak = bar.peak[ channel ];\n\t\t\t\tif ( peak > 0 && this.showPeaks && ! isLumiBars && posX >= initialX && posX < finalX ) {\n\t\t\t\t\t// choose the best opacity for the peaks\n\t\t\t\t\tif ( isOutline && lineWidth > 0 )\n\t\t\t\t\t\tctx.globalAlpha = 1;\n\t\t\t\t\telse if ( isAlphaBars )\n\t\t\t\t\t\tctx.globalAlpha = peak;\n\n\t\t\t\t\t// render peak according to current mode / effect\n\t\t\t\t\tif ( isLedDisplay )\n\t\t\t\t\t\tctx.fillRect( posX,\tanalyzerBottom - ledPosY( peak ), width, ledHeight );\n\t\t\t\t\telse if ( ! isRadial )\n\t\t\t\t\t\tctx.fillRect( posX, analyzerBottom - peak * maxBarHeight, adjWidth, 2 );\n\t\t\t\t\telse if ( mode != 10 ) // radial - no peaks for mode 10\n\t\t\t\t\t\tradialPoly( posX, peak * maxBarHeight * ( ! channel || -1 ), adjWidth, -2 );\n\t\t\t\t}\n\n\t\t\t} // for ( let i = 0; i < nBars; i++ )\n\n\t\t\t// if not using the canvas, move earlier to the next channel\n\t\t\tif ( ! useCanvas )\n\t\t\t\tcontinue;\n\n\t\t\t// restore global alpha\n\t\t\tctx.globalAlpha = 1;\n\n\t\t\t// Fill/stroke drawing path for mode 10\n\t\t\tif ( mode == 10 ) {\n\t\t\t\tif ( isRadial ) {\n\t\t\t\t\tif ( mirrorMode ) {\n\t\t\t\t\t\tlet p;\n\t\t\t\t\t\twhile ( p = points.pop() )\n\t\t\t\t\t\t\tctx.lineTo( ...radialXY( ...p, -1 ) );\n\t\t\t\t\t}\n\t\t\t\t\tctx.closePath();\n\t\t\t\t}\n\n\t\t\t\tif ( lineWidth > 0 )\n\t\t\t\t\tctx.stroke();\n\n\t\t\t\tif ( this.fillAlpha > 0 ) {\n\t\t\t\t\tif ( isRadial ) {\n\t\t\t\t\t\t// exclude the center circle from the fill area\n\t\t\t\t\t\tctx.moveTo( centerX + radius, centerY );\n\t\t\t\t\t\tctx.arc( centerX, centerY, radius, 0, TAU, true );\n\t\t\t\t\t}\n\t\t\t\t\telse { // close the fill area\n\t\t\t\t\t\tctx.lineTo( finalX, analyzerBottom );\n\t\t\t\t\t\tctx.lineTo( initialX, analyzerBottom );\n\t\t\t\t\t}\n\n\t\t\t\t\tctx.globalAlpha = this.fillAlpha;\n\t\t\t\t\tctx.fill();\n\t\t\t\t\tctx.globalAlpha = 1;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Reflex effect\n\t\t\tif ( this._reflexRatio > 0 && ! isLumiBars ) {\n\t\t\t\tlet posY, height;\n\t\t\t\tif ( this.reflexFit || isStereo ) { // always fit reflex in stereo mode\n\t\t\t\t\tposY   = isStereo && channel == 0 ? channelHeight + channelGap : 0;\n\t\t\t\t\theight = channelHeight - analyzerHeight;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tposY   = canvas.height - analyzerHeight * 2;\n\t\t\t\t\theight = analyzerHeight;\n\t\t\t\t}\n\n\t\t\t\t// set alpha and brightness for the reflection\n\t\t\t\tctx.globalAlpha = this.reflexAlpha;\n\t\t\t\tif ( this.reflexBright != 1 )\n\t\t\t\t\tctx.filter = `brightness(${this.reflexBright})`;\n\n\t\t\t\t// create the reflection\n\t\t\t\tctx.setTransform( 1, 0, 0, -1, 0, canvas.height );\n\t\t\t\tctx.drawImage( canvas, 0, channelTop, canvas.width, analyzerHeight, 0, posY, canvas.width, height );\n\n\t\t\t\t// reset changed properties\n\t\t\t\tctx.setTransform( 1, 0, 0, 1, 0, 0 );\n\t\t\t\tctx.filter = 'none';\n\t\t\t\tctx.globalAlpha = 1;\n\t\t\t}\n\n\t\t} // for ( let channel = 0; channel < isStereo + 1; channel++ ) {\n\n\t\t// Update energy\n\t\tenergy.val = currentEnergy / ( nBars << isStereo );\n\t\tif ( energy.val >= energy.peak ) {\n\t\t\tenergy.peak = energy.val;\n\t\t\tenergy.hold = 30;\n\t\t}\n\t\telse {\n\t\t\tif ( energy.hold > 0 )\n\t\t\t\tenergy.hold--;\n\t\t\telse if ( energy.peak > 0 )\n\t\t\t\tenergy.peak *= ( 30 + energy.hold-- ) / 30; // decay (drops to zero in 30 frames)\n\t\t}\n\n\t\tif ( useCanvas ) {\n\t\t\t// Mirror effect\n\t\t\tif ( mirrorMode && ! isRadial ) {\n\t\t\t\tctx.setTransform( -1, 0, 0, 1, canvas.width - initialX, 0 );\n\t\t\t\tctx.drawImage( canvas, initialX, 0, centerX, canvas.height, 0, 0, centerX, canvas.height );\n\t\t\t\tctx.setTransform( 1, 0, 0, 1, 0, 0 );\n\t\t\t}\n\n\t\t\t// restore solid lines\n\t\t\tctx.setLineDash([]);\n\n\t\t\t// draw frequency scale (X-axis)\n\t\t\tif ( this.showScaleX ) {\n\t\t\t\tif ( isRadial ) {\n\t\t\t\t\tctx.save();\n\t\t\t\t\tctx.translate( centerX, centerY );\n\t\t\t\t\tif ( this._spinSpeed )\n\t\t\t\t\t\tctx.rotate( this._spinAngle + HALF_PI );\n\t\t\t\t\tctx.drawImage( canvasR, -canvasR.width >> 1, -canvasR.width >> 1 );\n\t\t\t\t\tctx.restore();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tctx.drawImage( canvasX, 0, canvas.height - canvasX.height );\n\t\t\t}\n\t\t}\n\n\t\t// calculate and update current frame rate\n\n\t\tthis._frame++;\n\t\tconst elapsed = timestamp - this._time;\n\n\t\tif ( elapsed >= 1000 ) {\n\t\t\tthis._fps = this._frame / ( elapsed / 1000 );\n\t\t\tthis._frame = 0;\n\t\t\tthis._time = timestamp;\n\t\t}\n\t\tif ( this.showFPS ) {\n\t\t\tconst size = canvasX.height;\n\t\t\tctx.font = `bold ${size}px sans-serif`;\n\t\t\tctx.fillStyle = '#0f0';\n\t\t\tctx.textAlign = 'right';\n\t\t\tctx.fillText( Math.round( this._fps ), canvas.width - size, size * 2 );\n\t\t}\n\n\t\t// call callback function, if defined\n\t\tif ( this.onCanvasDraw ) {\n\t\t\tctx.save();\n\t\t\tctx.fillStyle = ctx.strokeStyle = this._canvasGradient;\n\t\t\tthis.onCanvasDraw( this );\n\t\t\tctx.restore();\n\t\t}\n\n\t\t// schedule next canvas update\n\t\tthis._runId = requestAnimationFrame( timestamp => this._draw( timestamp ) );\n\t}\n\n\t/**\n\t * Return the FFT data bin (array index) which represents a given frequency\n\t */\n\t_freqToBin( freq, rounding = 'round' ) {\n\t\tconst max = this._analyzer[0].frequencyBinCount - 1,\n\t\t\t  bin = Math[ rounding ]( freq * this.fftSize / this.audioCtx.sampleRate );\n\n\t\treturn bin < max ? bin : max;\n\t}\n\n\t/**\n\t * Generate currently selected gradient\n\t */\n\t_makeGrad() {\n\n\t\tif ( ! this._ready )\n\t\t\treturn;\n\n\t\tconst ctx            = this._canvasCtx,\n\t\t\t  canvas         = ctx.canvas,\n\t\t\t  isLumiBars     = this._isLumiBars,\n\t\t\t  gradientHeight = isLumiBars ? canvas.height : canvas.height * ( 1 - this._reflexRatio * ! this._stereo ) | 0,\n\t\t\t  \t\t\t\t\t// for stereo we keep the full canvas height and handle the reflex areas while generating the color stops\n\t\t\t  analyzerRatio  = 1 - this._reflexRatio,\n\t\t\t  initialX       = this._initialX;\n\n\t\t// for radial mode\n\t\tconst centerX   = canvas.width >> 1,\n\t\t\t  centerY   = canvas.height >> 1,\n\t\t\t  maxRadius = Math.min( centerX, centerY ),\n\t\t\t  radius    = this._radius;\n\n\t\tconst currGradient = this._gradients[ this._gradient ],\n\t\t\t  colorStops   = currGradient.colorStops,\n\t\t\t  isHorizontal = currGradient.dir == 'h';\n\n\t\tlet grad;\n\n\t\tif ( this._radial )\n\t\t\tgrad = ctx.createRadialGradient( centerX, centerY, maxRadius, centerX, centerY, radius - ( maxRadius - radius ) * this._stereo );\n\t\telse\n\t\t\tgrad = ctx.createLinearGradient( ...( isHorizontal ? [ initialX, 0, initialX + this._analyzerWidth, 0 ] : [ 0, 0, 0, gradientHeight ] ) );\n\n\t\tif ( colorStops ) {\n\t\t\tconst dual = this._stereo && ! this._splitGradient && ! isHorizontal;\n\n\t\t\t// helper function\n\t\t\tconst addColorStop = ( offset, colorInfo ) => grad.addColorStop( offset, colorInfo.color || colorInfo );\n\n\t\t\tfor ( let channel = 0; channel < 1 + dual; channel++ ) {\n\t\t\t\tcolorStops.forEach( ( colorInfo, index ) => {\n\n\t\t\t\t\tconst maxIndex = colorStops.length - 1;\n\n\t\t\t\t\tlet offset = colorInfo.pos !== undefined ? colorInfo.pos : index / maxIndex;\n\n\t\t\t\t\t// in dual mode (not split), use half the original offset for each channel\n\t\t\t\t\tif ( dual )\n\t\t\t\t\t\toffset /= 2;\n\n\t\t\t\t\t// constrain the offset within the useful analyzer areas (avoid reflex areas)\n\t\t\t\t\tif ( this._stereo && ! isLumiBars && ! this._radial && ! isHorizontal ) {\n\t\t\t\t\t\toffset *= analyzerRatio;\n\t\t\t\t\t\t// skip the first reflex area in split mode\n\t\t\t\t\t\tif ( ! dual && offset > .5 * analyzerRatio )\n\t\t\t\t\t\t\toffset += .5 * this._reflexRatio;\n\t\t\t\t\t}\n\n\t\t\t\t\t// only for split mode\n\t\t\t\t\tif ( channel == 1 ) {\n\t\t\t\t\t\t// add colors in reverse order if radial or lumi are active\n\t\t\t\t\t\tif ( this._radial || isLumiBars ) {\n\t\t\t\t\t\t\tconst revIndex = maxIndex - index;\n\t\t\t\t\t\t\tcolorInfo = colorStops[ revIndex ];\n\t\t\t\t\t\t\toffset = 1 - ( colorInfo.pos !== undefined ? colorInfo.pos : revIndex / maxIndex ) / 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t// if the first offset is not 0, create an additional color stop to prevent bleeding from the first channel\n\t\t\t\t\t\t\tif ( index == 0 && offset > 0 )\n\t\t\t\t\t\t\t\taddColorStop( .5, colorInfo );\n\t\t\t\t\t\t\t// bump the offset to the second half of the gradient\n\t\t\t\t\t\t\toffset += .5;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// add gradient color stop\n\t\t\t\t\taddColorStop( offset, colorInfo );\n\n\t\t\t\t\t// create additional color stop at the end of first channel to prevent bleeding\n\t\t\t\t\tif ( this._stereo && index == maxIndex && offset < .5 )\n\t\t\t\t\t\taddColorStop( .5, colorInfo );\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis._canvasGradient = grad;\n\t}\n\n\t/**\n\t * Internal function to change canvas dimensions on demand\n\t */\n\t_setCanvas( reason ) {\n\t\t// if initialization is not finished, quit\n\t\tif ( ! this._ready )\n\t\t\treturn;\n\n\t\tconst ctx        = this._canvasCtx,\n\t\t\t  canvas     = ctx.canvas,\n\t\t\t  canvasX    = this._scaleX.canvas,\n\t\t\t  pixelRatio = window.devicePixelRatio / ( this._loRes + 1 );\n\n\t\tlet screenWidth  = window.screen.width  * pixelRatio,\n\t\t\tscreenHeight = window.screen.height * pixelRatio;\n\n\t\t// Fix for iOS Safari - swap width and height when in landscape\n\t\tif ( Math.abs( window.orientation ) == 90 && screenWidth < screenHeight )\n\t\t\t[ screenWidth, screenHeight ] = [ screenHeight, screenWidth ];\n\n\t\tconst isFullscreen = this.isFullscreen,\n\t\t\t  isCanvasFs   = isFullscreen && this._fsEl == canvas,\n\t\t\t  newWidth     = isCanvasFs ? screenWidth  : ( this._width  || this._container.clientWidth  || this._defaultWidth  ) * pixelRatio | 0,\n\t\t\t  newHeight    = isCanvasFs ? screenHeight : ( this._height || this._container.clientHeight || this._defaultHeight ) * pixelRatio | 0;\n\n\t\t// set/update object properties\n\t\tthis._pixelRatio = pixelRatio;\n\t\tthis._fsWidth    = screenWidth;\n\t\tthis._fsHeight   = screenHeight;\n\n\t\t// if canvas dimensions haven't changed, quit\n\t\tif ( canvas.width == newWidth && canvas.height == newHeight )\n\t\t\treturn;\n\n\t\t// apply new dimensions\n\t\tcanvas.width  = newWidth;\n\t\tcanvas.height = newHeight;\n\n\t\t// update internal variables\n\t\tthis._calcAux();\n\n\t\t// if not in overlay mode, paint the canvas black\n\t\tif ( ! this.overlay ) {\n\t\t\tctx.fillStyle = '#000';\n\t\t\tctx.fillRect( 0, 0, newWidth, newHeight );\n\t\t}\n\n\t\t// set lineJoin property for area fill mode (this is reset whenever the canvas size changes)\n\t\tctx.lineJoin = 'bevel';\n\n\t\t// update dimensions of the scale canvas\n\t\tcanvasX.width = newWidth;\n\t\tcanvasX.height = Math.max( 20 * pixelRatio, Math.min( newWidth, newHeight ) / 27 | 0 );\n\n\t\t// (re)generate gradient\n\t\tthis._makeGrad();\n\n\t\t// calculate bar positions and led options\n\t\tthis._calcBars();\n\n\t\t// detect fullscreen changes (for Safari)\n\t\tif ( this._fsStatus !== undefined && this._fsStatus !== isFullscreen )\n\t\t\treason = 'fschange';\n\t\tthis._fsStatus = isFullscreen;\n\n\t\t// call the callback function, if defined\n\t\tif ( this.onCanvasResize )\n\t\t\tthis.onCanvasResize( reason, this );\n\t}\n\n\t/**\n\t * Set object properties\n\t */\n\t_setProps( options, useDefaults ) {\n\n\t\t// settings defaults\n\t\tconst defaults = {\n\t\t\talphaBars    : false,\n\t\t\tbarSpace     : 0.1,\n\t\t\tbgAlpha      : 0.7,\n\t\t\tfftSize      : 8192,\n\t\t\tfillAlpha    : 1,\n\t\t\tgradient     : 'classic',\n\t\t\tledBars      : false,\n\t\t\tlineWidth    : 0,\n\t\t\tloRes        : false,\n\t\t\tlumiBars     : false,\n\t\t\tmaxDecibels  : -25,\n\t\t\tmaxFreq      : 22000,\n\t\t\tminDecibels  : -85,\n\t\t\tminFreq      : 20,\n\t\t\tmirror       : 0,\n\t\t\tmode         : 0,\n\t\t\toutlineBars  : false,\n\t\t\toverlay      : false,\n\t\t\tradial\t\t : false,\n\t\t\treflexAlpha  : 0.15,\n\t\t\treflexBright : 1,\n\t\t\treflexFit    : true,\n\t\t\treflexRatio  : 0,\n\t\t\tshowBgColor  : true,\n\t\t\tshowFPS      : false,\n\t\t\tshowPeaks    : true,\n\t\t\tshowScaleX   : true,\n\t\t\tshowScaleY   : false,\n\t\t\tsmoothing    : 0.5,\n\t\t\tspinSpeed    : 0,\n\t\t\tsplitGradient: false,\n\t\t\tstart        : true,\n\t\t\tstereo       : false,\n\t\t\tuseCanvas    : true,\n\t\t\tvolume       : 1,\n\t\t};\n\n\t\t// callback functions properties\n\t\tconst callbacks = [ 'onCanvasDraw', 'onCanvasResize' ];\n\n\t\t// build an array of valid properties; `start` is not an actual property and is handled after setting everything else\n\t\tconst validProps = Object.keys( defaults ).filter( e => e != 'start' ).concat( callbacks, ['height', 'width'] );\n\n\t\t// handle deprecated `showLeds` property\n\t\tif ( options && options.showLeds !== undefined && options.ledBars === undefined )\n\t\t\toptions.ledBars = options.showLeds;\n\n\t\tif ( useDefaults || options === undefined )\n\t\t\toptions = { ...defaults, ...options }; // merge options with defaults\n\n\t\tfor ( const prop of Object.keys( options ) ) {\n\t\t\tif ( callbacks.includes( prop ) && typeof options[ prop ] !== 'function' ) // check invalid callback\n\t\t\t\tthis[ prop ] = undefined;\n\t\t\telse if ( validProps.includes( prop ) ) // set only valid properties\n\t\t\t\tthis[ prop ] = options[ prop ];\n\t\t}\n\n\t\tif ( options.start !== undefined )\n\t\t\tthis.toggleAnalyzer( options.start );\n\t}\n\n}\n\n/* Custom error class */\n\nclass AudioMotionError extends Error {\n\tconstructor( code, message ) {\n\t\tsuper( message );\n\t\tthis.name = 'AudioMotionError';\n\t\tthis.code = code;\n\t}\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/audiomotion-analyzer/src/audioMotion-analyzer.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _styles_piano_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/piano.css */ \"./src/styles/piano.css\");\n/* harmony import */ var _scripts_keyboard_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/keyboard.js */ \"./src/scripts/keyboard.js\");\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7O0FBQTRCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BhcmsvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJy4vc3R5bGVzL3BpYW5vLmNzcyc7XG5pbXBvcnQgJy4vc2NyaXB0cy9rZXlib2FyZC5qcyc7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/keyboard.js":
/*!*********************************!*\
  !*** ./src/scripts/keyboard.js ***!
  \*********************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var audiomotion_analyzer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! audiomotion-analyzer */ \"./node_modules/audiomotion-analyzer/src/audioMotion-analyzer.js\");\n\ndocument.addEventListener('DOMContentLoaded', function (event) {\n  // REMOVE CONSOLE LOGS \n  // console.log = function() {};\n  //Web Audio API\n  let audioContext = new (window.AudioContext || window.webkitAudioContext)(); //base Audio context\n  let noteGain = audioContext.createGain(); //gain\n  let oscList = []; //store key pressed oscilliators\n  let filter = audioContext.createBiquadFilter();\n  let noteFreq = {\n    //octave-1\n    '90': 261.626,\n    //Z, C4\n    '83': 277.183,\n    //S, C4#\n    '88': 293.665,\n    //X, D4\n    '68': 311.127,\n    //D, D4#\n    '67': 329.628,\n    //C, E4\n    '86': 349.228,\n    //V, F4\n    '71': 369.994,\n    //G, F4#\n    '66': 391.995,\n    //B, G4\n    '72': 415.305,\n    //H, G4#\n    '78': 440.000,\n    //N, A4\n    '74': 466.164,\n    //J, A4#\n    '77': 493.883,\n    //M, B4\n    '81': 523.251,\n    //Q, C5\n    '50': 554.365,\n    //2, C5#\n    '87': 587.329,\n    //W, D5\n    '51': 622.254,\n    //3, D5\n    '69': 659.255,\n    //E, E5\n    '82': 698.456,\n    //R, F5\n    '53': 739.989,\n    //5, F5#\n    '84': 783.991,\n    //T, G5\n    '54': 830.609,\n    //6, G5#\n    '89': 880.000,\n    //Y, A5\n    '55': 932.328,\n    //7, A5#\n    '85': 987.767,\n    //U, B5\n    '73': 1046.50 //I, C6\n  }; //key codes & note frequencies\n  let volumeControl = document.querySelector(\"input[name='volume']\");\n  let attackTime = 0.3;\n  let volume = 0;\n  let sustainLevel = 0.8;\n  let releaseTime = 0.3;\n\n  //DOM \n\n  let waveForm = document.querySelector(\"select[name='waveform']\");\n  let kick = document.getElementsByClassName('kick');\n  let hihat = document.getElementsByClassName('hihat');\n  let bass = document.getElementsByClassName('bass');\n  let choir = document.getElementsByClassName('choir');\n  let bell = document.getElementsByClassName('bell');\n  let vocal = document.getElementsByClassName('vocal');\n  let power = document.getElementById(\"power\");\n  let pads = [];\n  pads.push(kick, hihat, bass, choir, bell, vocal, power);\n  let hihat_audio = hihat[0].children[0];\n  let kick_audio = kick[0].children[0];\n  let bass_audio = bass[0].children[0];\n  let choir_audio = choir[0].children[0];\n  let bell_audio = bell[0].children[0];\n  let vocal_audio = vocal[0].children[0];\n  let audios = [];\n  audios.push(hihat_audio, kick_audio, bass_audio, choir_audio, bell_audio, vocal_audio);\n  let instructions_label = document.getElementById('instructions-label');\n  let instructions_modal = document.getElementById('instructions-modal');\n  let envelope_checkbox = document.getElementById('envelope-checkbox');\n  const attackControl = document.querySelector('#attack-control');\n  const releaseControl = document.querySelector('#release-control');\n\n  //************* EVENT LISTENERS ****************\n  window.addEventListener('keydown', keyDown);\n  window.addEventListener('keyup', keyUp);\n  volumeControl.addEventListener('change', adjustVolume, false);\n  waveForm.addEventListener('change', function (event) {\n    waveForm = event.target.value;\n  });\n  instructions_label.addEventListener('click', function (e) {\n    instructions_modal.style.display = \"block\";\n    // console.log(instructions_label);\n    // console.log(instructions_modal);\n  });\n  window.addEventListener(\"load\", function (e) {\n    instructions_modal.style.display = \"block\";\n  });\n  window.onclick = function (event) {\n    if (event.target === instructions_modal) {\n      // console.log(event);\n      instructions_modal.style.display = \"none\";\n    }\n  };\n  hihat[0].addEventListener('click', function (e) {\n    e.preventDefault();\n    if (hihat_audio.paused) {\n      hihat_audio.play();\n      hihat[0].style.color = 'red';\n    } else {\n      hihat_audio.pause();\n      hihat[0].style.color = 'black';\n    }\n    audioMotion.connectInput(hihat_audio);\n  });\n  kick[0].addEventListener('click', function (e) {\n    e.preventDefault();\n    if (kick_audio.paused) {\n      kick_audio.play();\n      kick[0].style.color = 'red';\n    } else {\n      kick_audio.pause();\n      kick[0].style.color = 'black';\n    }\n    audioMotion.connectInput(kick_audio);\n  });\n  bass[0].addEventListener('click', function (e) {\n    e.preventDefault();\n    if (bass_audio.paused) {\n      bass_audio.play();\n      bass[0].style.color = 'red';\n    } else {\n      bass_audio.pause();\n      bass[0].style.color = 'black';\n    }\n    audioMotion.connectInput(bass_audio);\n  });\n  bell[0].addEventListener('click', function (e) {\n    e.preventDefault();\n    if (bell_audio.paused) {\n      bell_audio.play();\n      bell[0].style.color = 'blue';\n    } else {\n      bell_audio.pause();\n      bell[0].style.color = 'black';\n    }\n    audioMotion.connectInput(bell_audio);\n  });\n  choir[0].addEventListener('click', function (e) {\n    e.preventDefault();\n    if (choir_audio.paused) {\n      choir_audio.play();\n      choir[0].style.color = 'blue';\n    } else {\n      choir_audio.pause();\n      choir[0].style.color = 'black';\n    }\n    audioMotion.connectInput(choir_audio);\n  });\n  vocal[0].addEventListener('click', function (e) {\n    e.preventDefault();\n    if (vocal_audio.paused) {\n      vocal_audio.play();\n      vocal[0].style.color = 'blue';\n    } else {\n      vocal_audio.pause();\n      vocal[0].style.color = 'black';\n    }\n    audioMotion.connectInput(vocal_audio);\n  });\n  attackControl.addEventListener('input', function () {\n    attackTime = parseFloat(this.value);\n  });\n  releaseControl.addEventListener('input', function () {\n    releaseTime = parseFloat(this.value);\n  });\n\n  //****************** FUNCTIONS *************************\n\n  //DOM element by data-freq\n  function keyDown(e) {\n    const key = e.keyCode.toString(); //key code            \n    if (noteFreq[key] && !oscList[key]) {\n      playNote(key);\n      // console.log(key)\n      let freq = noteFreq[key].toString();\n      let ele = document.querySelectorAll(`[data-freq = '${freq}']`);\n      //white or black?\n      // console.log(ele);\n      if (ele[0].className === 'white key') {\n        ele[0].style.backgroundColor = 'whitesmoke';\n        ele[0].style.boxShadow = \"0 0 7px #fff, 0 0 10px #fff, 0 0 21px #fff, 0 0 42px rgb(218, 216, 99)\";\n      } else if (ele[0].className === 'black key') {\n        ele[0].style.backgroundColor = 'yellow';\n        ele[0].style.boxShadow = \"0 0 7px #fff, 0 0 10px #fff, 0 0 21px #fff, 0 0 42px rgb(218, 216, 99)\";\n      }\n    }\n  }\n  ;\n  function keyUp(e) {\n    const key = e.keyCode.toString(); //55\n    if (noteFreq[key] && oscList[key]) {\n      oscList[key].stop();\n      delete oscList[key];\n      // console.log(oscList);\n      let freq = noteFreq[key].toString();\n      let ele = document.querySelectorAll(`[data-freq = '${freq}']`);\n      //white or black?\n      if (ele[0].className === 'white key') {\n        ele[0].style.backgroundColor = 'grey';\n        ele[0].style.boxShadow = 'none';\n      } else if (ele[0].className === 'black key') {\n        ele[0].style.backgroundColor = '#3d004e';\n        ele[0].style.boxShadow = 'none';\n      }\n      ;\n    }\n  }\n  ;\n\n  // AUDIO VISUALIZER\n  const audioMotion = new audiomotion_analyzer__WEBPACK_IMPORTED_MODULE_0__[\"default\"](document.getElementById('container'), {\n    gradient: 'prism'\n    // radial: true,\n    // spinSpeed: 20,\n  });\n  function playNote(key) {\n    const audioCtx = audioMotion.audioCtx;\n    const osc = audioCtx.createOscillator();\n    noteGain = audioCtx.createGain();\n    noteGain.gain.setValueAtTime(0, 0);\n    noteGain.gain.linearRampToValueAtTime(sustainLevel, audioCtx.currentTime + attackTime);\n    // noteGain.gain.setValueAtTime(sustainLevel, audioCtx.currentTime + 1 - releaseTime);\n    noteGain.gain.setValueAtTime(0, audioCtx.currentTime + 1 - releaseTime);\n    noteGain.gain.linearRampToValueAtTime(0, audioCtx.currentTime + 5);\n\n    // noteGain.gain.value = volumeControl.value\n    osc.frequency.setValueAtTime(noteFreq[key], audioCtx.currentTime);\n    osc.type = waveForm; //selected waveform\n    oscList[key] = osc; //261\n    oscList[key].connect(noteGain); //sound connected\n    audioMotion.connectInput(noteGain);\n    // noteGain.gain.value = volumeControl.value\n    oscList[key].start();\n  }\n  function adjustVolume(e) {\n    noteGain.gain.value = volumeControl.value;\n  }\n  ;\n  power.addEventListener('click', function () {\n    // play or pause track depending on state\n    if (this.dataset.playing === 'false') {\n      this.dataset.playing = 'true';\n    } else if (this.dataset.playing === 'true') {\n      audios.forEach(el => {\n        el.pause();\n      });\n      pads.forEach(pad => {\n        pad[0].style.color = \"black\";\n      });\n\n      // Kill pads\n      audioCtx.close();\n      //Kill piano\n\n      this.dataset.playing = 'false';\n    }\n  }, false);\n\n  //CONNECTIONS\n\n  noteGain.connect(filter);\n  filter.connect(audioContext.destination);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/keyboard.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcGFyay8uL3NyYy9pbmRleC5zY3NzPzk3NDUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ }),

/***/ "./src/styles/piano.css":
/*!******************************!*\
  !*** ./src/styles/piano.css ***!
  \******************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3R5bGVzL3BpYW5vLmNzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zcGFyay8uL3NyYy9zdHlsZXMvcGlhbm8uY3NzPzlkYjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/styles/piano.css\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	!function() {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = function(exports, definition) {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	!function() {
/******/ 		__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }
/******/ 	}();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_require__("./src/index.js");
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.scss");
/******/ 	
/******/ })()
;